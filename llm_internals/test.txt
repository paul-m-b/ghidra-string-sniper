$1CSdsl^L@2,(")-3AM_mvqg\\PD<869=EQ]hrwtojaXTJHKUYbkpu	0
%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz	0
&'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz	0
IJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopq	0
!)059=@BEGIKLNPRUWY[\\^`begiklnpruwy{|~	0
        color += g_InputTexture.Sample(g_SamplerLinear, float2(IN.uv[i].x, 1.0f - IN.uv[i].y)) * in_region.x * in_region.y * m_weights[abs(i - BLUR_NUM_WEIGHTS + 1)];	4
.?AV?$_Func_impl_no_alloc@V<lambda_186073d2f4718b3652328acae546486e>@@_NAEBVCallbackTextureInterface@Rml@@@std@@	7
\t\tcolor += texture(_tex, fragTexCoord[i]) * in_region.x * in_region.y * _weights[abs(i - BLUR_NUM_WEIGHTS + 1)];	4
.?AV?$_Func_impl_no_alloc@V<lambda_a7213f834e3d4cfddad50aa389be2f27>@@_NAEBVCallbackTextureInterface@Rml@@@std@@	7
"$&\')*+,-.//123456779:;<=>??ABCDEFGG('	0
Copyright (c) by P.J. Plauger, licensed by Dinkumware, Ltd. ALL RIGHTS RESERVED.	8
=rF`JXKXWJYB[Cd;l2x(z%a+N2SNTQXKVJWGZI]J]Jm(r$u"u"'	0
uniform float _weights[BLUR_NUM_WEIGHTS];	5
?setProperty@EventInstance@Studio@FMOD@@QEAA?AW4FMOD_RESULT@@W4FMOD_STUDIO_EVENT_PROPERTY@@M@Z	8
.?AV?$_Func_impl_no_alloc@V<lambda_b1f0d26c839b8a071242c4d654f46b5b>@@XVDataModelHandle@Rml@@AEAVEvent@3@AEBV?$vector@VVariant@Rml@@V?$allocator@VVariant@Rml@@@std@@@std@@@std@@	7
.?AV?$_Func_impl_no_alloc@V<lambda_d97f447ef5ade413a80399eb5bd88972>@@X$$V@std@@	7
"Can't use FMOD_OPENMEMORY_POINT on non PCM source data, or non mp3/xma/adpcm data if FMOD_CREATECOMPRESSEDSAMPLE was used."	9
qdZRMHD@=;86421/.-+*)(\'\'&%$$#""!! 	0
While reading CCP_QNTSTY element inside QCD or QCC marker segment, number of subbands (%d) is greater to OPJ_J2K_MAXBANDS (%d). So we limit the number of elements stored to OPJ_J2K_MAXBANDS (%d) and skip the rest. 	8
SEC_E_ILLEGAL_MESSAGE (0x%08X) - This error usually occurs when a fatal SSL/TLS alert is received (e.g. handshake failed). More detail may be available in the Windows System event log.	8
    float4 m_stop_positions[MAX_NUM_STOPS_PACKED]; // normalized, 0 -> starting point, 1 -> ending point	5
?setAdvancedSettings@System@FMOD@@QEAA?AW4FMOD_RESULT@@PEAUFMOD_ADVANCEDSETTINGS@@@Z	8
?getCoreSystem@System@Studio@FMOD@@QEBA?AW4FMOD_RESULT@@PEAPEAV13@@Z	8
?setSoftwareChannels@System@FMOD@@QEAA?AW4FMOD_RESULT@@H@Z	8
?dec_ref@pp_batch_ref_counter_t@impl@prism@@SAXV?$r_id_t@G$0MNPILMKKO@$0BA@@3@@Z	7
internalPacket->orderingChannel >= NUMBER_OF_ORDERED_STREAMS	5
warning: unsupported value passed to CURLOPT_SOCKS5_AUTH: %lu	7
in vec2 fragTexCoord[BLUR_SIZE];	5
.?AV?$_Func_impl_no_alloc@V<lambda_f2e1e1aefa3a42570908466e6d564448>@@VVariant@Rml@@AEBV?$vector@VVariant@Rml@@V?$allocator@VVariant@Rml@@@std@@@std@@@std@@	7
scanline oriented access is not supported for downsampled JPEG compressed images, consider enabling TIFF_JPEGCOLORMODE as JPEGCOLORMODE_RGB.	6
Unable to handle PLANARCONFIG_SEPARATE LogLuv images	6
bad FPU precision (use D3DCREATE_FPU_PRESERVE with DirectX)	6
.?AV?$_LaunchPad@V?$unique_ptr@V?$tuple@V<lambda_f574185c45dda01958beedcd6f2ea127>@@@std@@U?$default_delete@V?$tuple@V<lambda_f574185c45dda01958beedcd6f2ea127>@@@std@@@2@@std@@@std@@	7
.?AV?$_Func_impl_no_alloc@V<lambda_164ece163ee94a38699a010967d20b89>@@VVariant@Rml@@AEBV?$vector@VVariant@Rml@@V?$allocator@VVariant@Rml@@@std@@@std@@@std@@	7
out vec2 fragTexCoord[BLUR_SIZE];	5
.?AVLineCompositeTask@?A0x762881a3@Imf_2_2@@	7
CURLOPT_SSL_VERIFYHOST no longer supports 1 as value!	7
[ERROR] (%s:%d: errno: %s) cur is NULL, last_matched_container->tag = %d	5
Copyright (C) 2014, Thomas G. Lane, Guido Vollbeding	7
uniform float _stop_positions[MAX_NUM_STOPS]; // normalized, 0 -> starting point, 1 -> ending point	5
6s?fBbEcJYG[I[NYVP\\B]@f;g<h<u4{,	0
"Couldn't parse CURLOPT_RESOLVE removal entry '%s'!"	7
Unrecognized parameter value passed via CURLOPT_SSLVERSION	7
uniform vec4 _stop_colors[MAX_NUM_STOPS];	5
.?AV?$_Func_impl_no_alloc@V<lambda_d04dada8c8a089c147e16c955e8e69b1>@@VVariant@Rml@@AEBV?$vector@VVariant@Rml@@V?$allocator@VVariant@Rml@@@std@@@std@@@std@@	7
;nGVKUTS[BXIWH\\KbHi:k6s4r7p8	0
Unable to handle PLANARCONFIG_SEPARATE RGB half float images	6
        float2 in_region = step(m_texCoordMin, IN.uv[i]) * step(IN.uv[i], m_texCoordMax);	5
    float2 in_region = step(m_texCoordMin, IN.uv) * step(IN.uv, m_texCoordMax);	5
